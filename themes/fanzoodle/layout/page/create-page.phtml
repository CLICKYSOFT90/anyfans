<div class="page-margin">
    <div class="row">
        <div class="col-md-2 leftcol"><?php echo Wo_LoadPage("sidebar/left-sidebar"); ?></div>
        <div class="col-md-7 middlecol">
            <div class="page-margin wow_content mt-0">
                <div class="wo_page_hdng pag_neg_padd pag_alone">
                    <div class="wo_page_hdng_innr">
                        <span><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24"><path
                                        fill="currentColor"
                                        d="M17,14H19V17H22V19H19V22H17V19H14V17H17V14M12.4,5H18V12C15.78,12 13.84,13.21 12.8,15H11L10.6,13H5V20H3V3H12L12.4,5Z"></path></svg></span> <?php echo $wo['lang']['create_new_page']; ?>
                    </div>
                </div>
            </div>

            <div class="page-margin wow_content wow_sett_content">
                <form class="create-page-form form-horizontal" method="post">
                    <div class="wow_form_fields">
                        <div class="wow_form_fields">
                            <label for="page_sub_category">Pick One:</label>
                            <select name="">
                                <option value="amateur">Amateur</option>
                                <option value="professinal">Professional (Pro must be verified)</option>
                            </select>
                        </div>
                    </div>
                    <div class="wow_form_fields">
                        <label>Picture Spots</label>
                        <div class="custom-image-upload">
                            <span class="fileinput-button">
                                <span><i class="fa fa-camera"></i> </span>
                                <input type="file" name="pic_spots[]" id="pic_spots" multiple
                                       accept="image/jpeg, image/png,"><br/>
                            </span>
                            <output id="PictureFilelist"></output>
                        </div>
                    </div>
                    <div class="wow_form_fields">
                        <label for="page_title"><?php echo $wo['lang']['page_name']; ?></label>
                        <input id="page_title" name="page_title" type="text">
                        <span class="help-block"><?php echo $wo['lang']['your_page_title']; ?></span>
                    </div>
                    <div class="wow_form_fields">
                        <label for="page_name"><?php echo $wo['lang']['page']; ?> URL</label>
                        <div class="input-group">
                            <span class="input-group-addon"><?php echo $wo['config']['site_url']; ?>/</span>
                            <input id="page_name" name="page_name" type="text">
                        </div>
                    </div>
                    <div class="wow_form_fields">
                        <label for="high_school">High School (optinal)</label>
                        <input id="high_school" name="high_school" type="text">
                    </div>
                    <div class="wow_form_fields">
                        <label for="college">College (optinal)</label>
                        <input id="college" name="college" type="text">
                    </div>
                    <div class="wow_form_fields">
                        <label for="pro_team">Pro Team (optinal)</label>
                        <input id="pro_team" name="pro_team" type="text">
                    </div>
                    <div class="wow_form_fields">
                        <label for="position">Position</label>
                        <input id="position" name="position" type="text">
                    </div>
                    <div class="wow_form_fields">
                        <label for="page_category">Next Step Desired (choose one):</label>
                        <select name="page_category" id="page_category">
                            <option value="1">I want to play college</option>
                            <option value="2">I want to play professionally</option>
                            <option value="3">I do not plan to play past my current level except recreationally for
                                fun
                            </option>
                        </select>
                    </div>

                    <div class="wow_form_fields">
                        <label for="years_played">Years Played</label>
                        <input id="years_played" name="years_played" type="text">
                    </div>
                    <div class="wow_form_fields d-flex">
                        <div class="mlr-10">
                            <label for="page_category">Country</label>
                            <select name="page_category" id="page_category">
                                <option value="1">I want to play college</option>
                                <option value="2">I want to play professionally</option>
                                <option value="3">I do not plan to play past my current level except recreationally for
                                    fun
                                </option>
                            </select>
                        </div>
                        <div class="mlr-10">
                            <label for="page_category">State</label>
                            <select name="page_category" id="page_category">
                                <option value="1">I want to play college</option>
                                <option value="2">I want to play professionally</option>
                                <option value="3">I do not plan to play past my current level except recreationally for
                                    fun
                                </option>
                            </select>
                        </div>
                        <div class="mlr-10">
                            <label for="page_category">City</label>
                            <select name="page_category" id="page_category">
                                <option value="1">I want to play college</option>
                                <option value="2">I want to play professionally</option>
                                <option value="3">I do not plan to play past my current level except recreationally for
                                    fun
                                </option>
                            </select>
                        </div>
                    </div>
                    <div class="wow_form_fields">
                        <label for="page_category"><?php echo $wo['lang']['page_category']; ?></label>
                        <select name="page_category" id="page_category" onchange="GetPageSubCategory(this)">
                            <?php foreach ($wo['page_categories'] as $category_id => $category_name) { ?>
                                <option value="<?php echo $category_id ?>"><?php echo $category_name; ?></option>
                            <?php } ?>
                        </select>
                    </div>
                    <div class="wow_form_fields">
                        <label>Accolades</label>
                            <div class="custom-image-upload">
                            <span class="fileinput-button">
                                <span><i class="fa fa-camera"></i> </span>
                                <input type="file" name="accolades[]" id="files" multiple
                                       accept="image/jpeg, image/png,"><br/>
                            </span>
                            <output id="Filelist"></output>
                        </div>
                    </div>
                    <?php if (!empty($wo['page_sub_categories'])) { ?>
                        <div class="wow_form_fields">
                            <label for="page_sub_category"><?php echo $wo['lang']['sub_category']; ?></label>
                            <select name="page_sub_category" id="page_sub_category">
                                <?php
                                if (!empty($wo['page_sub_categories'][array_keys($wo['page_categories'])[0]])) {
                                    foreach ($wo['page_sub_categories'][array_keys($wo['page_categories'])[0]] as $id => $sub_category) { ?>
                                        <option value="<?php echo $sub_category['id'] ?>"><?php echo $sub_category['lang']; ?></option>
                                    <?php }
                                } ?>
                            </select>
                        </div>
                    <?php } ?>
                    <div class="wow_form_fields">
                        <label for="page_description"><?php echo $wo['lang']['page_description']; ?></label>
                        <textarea name="page_description" id="page_description" rows="3"></textarea>
                        <span class="help-block"><?php echo $wo['lang']['page_description_info']; ?></span>
                    </div>
                    <?php $fields = Wo_GetCustomFields('page');
                    if (!empty($fields)) {
                        foreach ($fields as $key => $wo['field']) {
                            echo Wo_LoadPage('page/fields');
                        }
                    }
                    ?>
                    <div class="app-general-alert setting-update-alert"></div>
                    <div class="text-center">
                        <a class="btn btn-mat" data-ajax="?link1=pages"
                           href="<?php echo Wo_SeoLink('index.php?link1=pages'); ?>">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24">
                                <path fill="currentColor"
                                      d="M20,11V13H8L13.5,18.5L12.08,19.92L4.16,12L12.08,4.08L13.5,5.5L8,11H20Z"></path>
                            </svg> <?php echo $wo['lang']['go_back']; ?>
                        </a>
                        <button class="btn btn-main btn-mat btn-mat-raised add_wow_loader"
                                type="submit"><?php echo $wo['lang']['create']; ?></button>
                    </div>
                    <input type="hidden" name="hash_id" value="<?php echo Wo_CreateSession(); ?>">
                </form>
            </div>
        </div>
        <!-- .col-md-8 -->
        <?php echo Wo_LoadPage('sidebar/content'); ?>
    </div>
    <!-- .row -->
</div>
<!-- .page-margin -->
<script type="text/javascript">

    // Image Upload Script
    //I added event handler for the file upload control to access the files properties.
    document.addEventListener("DOMContentLoaded", init, false);

    //To save an array of attachments
    var AttachmentArray = [];

    //counter for attachment array
    var arrCounter = 0;

    //to make sure the error message for number of files will be shown only one time.
    var filesCounterAlertStatus = false;

    //un ordered list to keep attachments thumbnails
    var ul = document.createElement("ul");
    ul.className = "thumb-Images";
    ul.id = "imgList";

    function init() {
        //add javascript handlers for the file upload event
        document
            .querySelector("#pic_spots")
            .addEventListener("change", handleFileSelect, false);
    }

    //the handler for file upload event
    function handleFileSelect(e) {
        //to make sure the user select file/files
        if (!e.target.files) return;

        //To obtaine a File reference
        var files = e.target.files;

        // Loop through the FileList and then to render image files as thumbnails.
        for (var i = 0, f; (f = files[i]); i++) {
            //instantiate a FileReader object to read its contents into memory
            var fileReader = new FileReader();

            // Closure to capture the file information and apply validation.
            fileReader.onload = (function(readerEvt) {
                return function(e) {
                    //Apply the validation rules for attachments upload
                    ApplyFileValidationRules(readerEvt);

                    //Render attachments thumbnails.
                    RenderThumbnail(e, readerEvt);

                    //Fill the array of attachment
                    FillAttachmentArray(e, readerEvt);
                };
            })(f);

            // Read in the image file as a data URL.
            // readAsDataURL: The result property will contain the file/blob's data encoded as a data URL.
            // More info about Data URI scheme https://en.wikipedia.org/wiki/Data_URI_scheme
            fileReader.readAsDataURL(f);
        }
        document
            .getElementById("pic_spots")
            .addEventListener("change", handleFileSelect, false);
    }

    //To remove attachment once user click on x button
    jQuery(function($) {
        $("div").on("click", ".img-wrap .close", function() {
            var id = $(this)
                .closest(".img-wrap")
                .find("img")
                .data("id");

            //to remove the deleted item from array
            var elementPos = AttachmentArray.map(function(x) {
                return x.FileName;
            }).indexOf(id);
            if (elementPos !== -1) {
                AttachmentArray.splice(elementPos, 1);
            }

            //to remove image tag
            $(this)
                .parent()
                .find("img")
                .not()
                .remove();

            //to remove div tag that contain the image
            $(this)
                .parent()
                .find("div")
                .not()
                .remove();

            //to remove div tag that contain caption name
            $(this)
                .parent()
                .parent()
                .find("div")
                .not()
                .remove();

            //to remove li tag
            var lis = document.querySelectorAll("#imgList li");
            for (var i = 0; (li = lis[i]); i++) {
                if (li.innerHTML == "") {
                    li.parentNode.removeChild(li);
                }
            }
        });
    });

    //Apply the validation rules for attachments upload
    function ApplyFileValidationRules(readerEvt) {
        //To check file type according to upload conditions
        if (CheckFileType(readerEvt.type) == false) {
            alert(
                "The file (" +
                readerEvt.name +
                ") does not match the upload conditions, You can only upload jpg/png/gif files"
            );
            e.preventDefault();
            return;
        }

        //To check file Size according to upload conditions
        if (CheckFileSize(readerEvt.size) == false) {
            alert(
                "The file (" +
                readerEvt.name +
                ") does not match the upload conditions, The maximum file size for uploads should not exceed 300 KB"
            );
            e.preventDefault();
            return;
        }

        //To check files count according to upload conditions
        if (CheckFilesCount(AttachmentArray) == false) {
            if (!filesCounterAlertStatus) {
                filesCounterAlertStatus = true;
                alert(
                    "You have added more than 10 files. According to upload conditions you can upload 10 files maximum"
                );
            }
            e.preventDefault();
            return;
        }
    }

    //To check file type according to upload conditions
    function CheckFileType(fileType) {
        if (fileType == "image/jpeg") {
            return true;
        } else if (fileType == "image/png") {
            return true;
        } else if (fileType == "image/gif") {
            return true;
        } else {
            return false;
        }
        return true;
    }

    //To check file Size according to upload conditions
    function CheckFileSize(fileSize) {
        if (fileSize < 300000) {
            return true;
        } else {
            return false;
        }
        return true;
    }

    //To check files count according to upload conditions
    function CheckFilesCount(AttachmentArray) {
        //Since AttachmentArray.length return the next available index in the array,
        //I have used the loop to get the real length
        var len = 0;
        for (var i = 0; i < AttachmentArray.length; i++) {
            if (AttachmentArray[i] !== undefined) {
                len++;
            }
        }
        //To check the length does not exceed 10 files maximum
        if (len > 9) {
            return false;
        } else {
            return true;
        }
    }

    //Render attachments thumbnails.
    function RenderThumbnail(e, readerEvt) {
        var li = document.createElement("li");
        ul.appendChild(li);
        li.innerHTML = [
            '<div class="img-wrap"> <span class="close"><i class="fa fa-times"></i> </span>' +
            '<img class="thumb" src="',
            e.target.result,
            '" title="',
            escape(readerEvt.name),
            '" data-id="',
            readerEvt.name,
            '"/>' + "</div>"
        ].join("");

        var div = document.createElement("div");
        div.className = "FileNameCaptionStyle";
        li.appendChild(div);
        div.innerHTML = [readerEvt.name].join("");
        document.getElementById("PictureFilelist").insertBefore(ul, null);
    }

    //Fill the array of attachment
    function FillAttachmentArray(e, readerEvt) {
        AttachmentArray[arrCounter] = {
            AttachmentType: 1,
            ObjectType: 1,
            FileName: readerEvt.name,
            FileDescription: "Attachment",
            NoteText: "",
            MimeType: readerEvt.type,
            Content: e.target.result.split("base64,")[1],
            FileSizeInBytes: readerEvt.size
        };
        arrCounter = arrCounter + 1;
    }
    // Image Upload Script
    // Picture Spot



    // Accolades

    // Image Upload Script
    //I added event handler for the file upload control to access the files properties.
    document.addEventListener("DOMContentLoaded", init, false);

    //To save an array of attachments
    var AttachmentArray = [];

    //counter for attachment array
    var arrCounter = 0;

    //to make sure the error message for number of files will be shown only one time.
    var filesCounterAlertStatus = false;

    //un ordered list to keep attachments thumbnails
    var ul = document.createElement("ul");
    ul.className = "thumb-Images";
    ul.id = "imgList";

    function init() {
        //add javascript handlers for the file upload event
        document
            .querySelector("#files")
            .addEventListener("change", handleFileSelect, false);
    }

    //the handler for file upload event
    function handleFileSelect(e) {
        //to make sure the user select file/files
        if (!e.target.files) return;

        //To obtaine a File reference
        var files = e.target.files;

        // Loop through the FileList and then to render image files as thumbnails.
        for (var i = 0, f; (f = files[i]); i++) {
            //instantiate a FileReader object to read its contents into memory
            var fileReader = new FileReader();

            // Closure to capture the file information and apply validation.
            fileReader.onload = (function(readerEvt) {
                return function(e) {
                    //Apply the validation rules for attachments upload
                    ApplyFileValidationRules(readerEvt);

                    //Render attachments thumbnails.
                    RenderThumbnail(e, readerEvt);

                    //Fill the array of attachment
                    FillAttachmentArray(e, readerEvt);
                };
            })(f);

            // Read in the image file as a data URL.
            // readAsDataURL: The result property will contain the file/blob's data encoded as a data URL.
            // More info about Data URI scheme https://en.wikipedia.org/wiki/Data_URI_scheme
            fileReader.readAsDataURL(f);
        }
        document
            .getElementById("files")
            .addEventListener("change", handleFileSelect, false);
    }

    //To remove attachment once user click on x button
    jQuery(function($) {
        $("div").on("click", ".img-wrap .close", function() {
            var id = $(this)
                .closest(".img-wrap")
                .find("img")
                .data("id");

            //to remove the deleted item from array
            var elementPos = AttachmentArray.map(function(x) {
                return x.FileName;
            }).indexOf(id);
            if (elementPos !== -1) {
                AttachmentArray.splice(elementPos, 1);
            }

            //to remove image tag
            $(this)
                .parent()
                .find("img")
                .not()
                .remove();

            //to remove div tag that contain the image
            $(this)
                .parent()
                .find("div")
                .not()
                .remove();

            //to remove div tag that contain caption name
            $(this)
                .parent()
                .parent()
                .find("div")
                .not()
                .remove();

            //to remove li tag
            var lis = document.querySelectorAll("#imgList li");
            for (var i = 0; (li = lis[i]); i++) {
                if (li.innerHTML == "") {
                    li.parentNode.removeChild(li);
                }
            }
        });
    });

    //Apply the validation rules for attachments upload
    function ApplyFileValidationRules(readerEvt) {
        //To check file type according to upload conditions
        if (CheckFileType(readerEvt.type) == false) {
            alert(
                "The file (" +
                readerEvt.name +
                ") does not match the upload conditions, You can only upload jpg/png/gif files"
            );
            e.preventDefault();
            return;
        }

        //To check file Size according to upload conditions
        if (CheckFileSize(readerEvt.size) == false) {
            alert(
                "The file (" +
                readerEvt.name +
                ") does not match the upload conditions, The maximum file size for uploads should not exceed 300 KB"
            );
            e.preventDefault();
            return;
        }

        //To check files count according to upload conditions
        if (CheckFilesCount(AttachmentArray) == false) {
            if (!filesCounterAlertStatus) {
                filesCounterAlertStatus = true;
                alert(
                    "You have added more than 10 files. According to upload conditions you can upload 10 files maximum"
                );
            }
            e.preventDefault();
            return;
        }
    }

    //To check file type according to upload conditions
    function CheckFileType(fileType) {
        if (fileType == "image/jpeg") {
            return true;
        } else if (fileType == "image/png") {
            return true;
        } else if (fileType == "image/gif") {
            return true;
        } else {
            return false;
        }
        return true;
    }

    //To check file Size according to upload conditions
    function CheckFileSize(fileSize) {
        if (fileSize < 300000) {
            return true;
        } else {
            return false;
        }
        return true;
    }

    //To check files count according to upload conditions
    function CheckFilesCount(AttachmentArray) {
        //Since AttachmentArray.length return the next available index in the array,
        //I have used the loop to get the real length
        var len = 0;
        for (var i = 0; i < AttachmentArray.length; i++) {
            if (AttachmentArray[i] !== undefined) {
                len++;
            }
        }
        //To check the length does not exceed 10 files maximum
        if (len > 9) {
            return false;
        } else {
            return true;
        }
    }

    //Render attachments thumbnails.
    function RenderThumbnail(e, readerEvt) {
        var li = document.createElement("li");
        ul.appendChild(li);
        li.innerHTML = [
            '<div class="img-wrap"> <span class="close"><i class="fa fa-times"></i> </span>' +
            '<img class="thumb" src="',
            e.target.result,
            '" title="',
            escape(readerEvt.name),
            '" data-id="',
            readerEvt.name,
            '"/>' + "</div>"
        ].join("");

        var div = document.createElement("div");
        div.className = "FileNameCaptionStyle";
        li.appendChild(div);
        div.innerHTML = [readerEvt.name].join("");
        document.getElementById("Filelist").insertBefore(ul, null);
    }

    //Fill the array of attachment
    function FillAttachmentArray(e, readerEvt) {
        AttachmentArray[arrCounter] = {
            AttachmentType: 1,
            ObjectType: 1,
            FileName: readerEvt.name,
            FileDescription: "Attachment",
            NoteText: "",
            MimeType: readerEvt.type,
            Content: e.target.result.split("base64,")[1],
            FileSizeInBytes: readerEvt.size
        };
        arrCounter = arrCounter + 1;
    }
    // Image Upload Script

    <?php
    $js_array = json_encode($wo['page_sub_categories']);
    echo "var sub_categories_array = " . $js_array . ";\n";
    ?>
    function GetPageSubCategory(self) {
        id = $(self).val();
        var text = "";
        if (typeof (sub_categories_array[id]) == 'undefined') {
            $('#page_sub_category').html('');
        } else {
            sub_categories_array[id].forEach(function (entry) {
                text = text + "<option value='" + entry.id + "'>" + entry.lang + "</option>";
            });
            $('#page_sub_category').html(text);
        }
    }

    $(function () {
        $('form.create-page-form').ajaxForm({
            url: Wo_Ajax_Requests_File() + '?f=pages&s=create_page',
            beforeSend: function () {
                $('.create-page-form').find('.add_wow_loader').addClass('btn-loading');
            },
            success: function (data) {
                scrollToTop();
                if (data.status == 200) {
                    window.location.href = data.location;
                } else {
                    var errors = data.errors.join("<br>");
                    $('.app-general-alert').html('<div class="alert alert-danger">' + errors + '</div>');
                    $('.alert-danger').fadeIn(300);
                }
                $('.create-page-form').find('.add_wow_loader').removeClass('btn-loading');
            }
        });
    });
</script>